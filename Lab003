// Lab requirements (applied in any order you choose):

// 5.  Output each Make array to the console, ordered by year (from step 2), with recall details included (from step 3), and all salvaged vehicles removed (from step 4)
// 6.  Step 5 should be in an easy to read format - use new lines and tabs for formatting
// 7.  Output the following stats :
//    a.  Total number of vehicles you started with
//    b.  Total number of non-salvage vehicles of each Make
//    c.  Total number of vehicles that were removed due to salvage
//    d.  Total number of non-salvage vehicles of each year model, regardless of Make.
//
// Restriction : Do not hardcode your array names like "const teslaVehicles" - assume the vehicle list contains an unknown number of makes and generate the variable names dynamically

// TODO : START YOUR CODE HERE
const vehicles = [
  {
    make: 'Ford',
    model: 'Fusion',
    year: 2007,
    vin: '9a11ff3c-7d9d-41bf-8b20-b8f26ebad785',
  },
  {
    make: 'Toyota',
    model: 'Tundra',
    year: 1986,
    vin: 'd81d10c5-504c-428c-b174-2209f7377c72',
  },
  {
    make: 'Ford',
    model: 'Mustang',
    year: 2000,
    vin: '066ac424-60f8-46e6-bf77-a52314a5b919',
  },
  {
    make: 'Toyota',
    model: 'Tundra',
    year: 1988,
    vin: '3e51c23e-abad-4f01-974d-37be0366514d',
  },
  {
    make: 'Chevrolet',
    model: 'Silverado',
    year: 2009,
    vin: '5dd65083-b991-4a0a-8cd5-5cb324dad29f',
  },
];

const recallList = [
  { vin: '9a11ff3c-7d9d-41bf-8b20-b8f26ebad785', reason: 'Risk of fire' },
  { vin: '3e51c23e-abad-4f01-974d-37be0366514d', reason: 'Leaf springs' },
  {
    vin: 'bd283567-8114-44a6-82cb-112bde49fa6e',
    reason: 'Electronics failure',
  },
];

const salvageVINs = [
  '9a11ff3c-7d9d-41bf-8b20-b8f26ebad785',
  '935f8245-8816-42cf-9ea6-594286e3df0d',
];

// 1.  Create new arrays for each "Make" of vehicle.
//     a.  Each new array should only contain vehicles of the same make and the array variable should be named appropriately (EG: teslaVehicles)

const grouped = {};

for (const vehicle of vehicles) {
  if (grouped[vehicle.make]) {
    grouped[vehicle.make].push(vehicle);
  } else {
    grouped[vehicle.make] = [vehicle];
  }
}

// 2.  Order each new Make array by vehicle year in ascending order
vehicles.sort((v1, v2) => {
  if (v1.year > v2.year) {
    return 1;
  } else {
    return -1;
  }
});

// 3.  Add recall reason from the recallList to each vehicle (based on VIN) as "recallReason"
const vehicleWithRecall = vehicles.map((vehicle) => {
  const recall = recallList.find((recall) => {
    return vehicle.vin === recall.vin;
  });

  if (recall) {
    vehicle.recallReason = recall.reason;
  }
  return vehicle;
});

// 4.  Remove any vehicles that have a salvage title (based on VIN)
let arr = vehicles.length;
while (arr--) {
  if (salvageVINs.some((salvage) => salvage === vehicles[arr].vin))
    vehicles.splice(arr, 1);
}

//console.log(vehicles);

console.log(grouped);

/*
vehicles.forEach((vehicle) => {
 console.log(`${vehicle.make} (Model, Year, Vin, Recall Reason)
\t${vehicle.model}, ${vehicle.year}, ${vehicle.vin}, ${vehicle.recallReason || 'N/A'}`);
});
*/
